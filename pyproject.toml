[tool.poetry]
name = "bgc-data-processing"
version = "0.1.0"
description = "Set of scripts to prepare csv files with BGC variables for EnKF prepobs"
authors = ["Ga√©tan Rigaut <gaetanrigaut.s@gmail.com>"]
readme = "README.md"
packages = [
    { include = "bgc_data_processing", from = "src" },
    { include = "abfile", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
pandas = "^1.5.2"
numpy = "<1.24"
cartopy = "0.21.1"
netcdf4 = "^1.6.2"
pyproj = "~3.4"
shapely = "^2.0.1"
geopandas = "^0.12.2"
eomaps = "^6.3"
seawater = "^3.3.4"
scipy = "^1.10.1"
scikit-learn = "^1.2.2"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-autorefs = "^0.4.1"
mkdocs-material = "^9.0.6"
mkdocstrings = { extras = ["python"], version = "^0.20.0" }
mkdocs-macros-plugin = "^0.7.0"


[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
pre-commit = "^3.1.1"
ruff = "^0.0.274"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
force-exclude = "src/abfile"

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = ["src/abfile/*"]
select = [
    # pyflakes
    'F',
    # pycodestyle Errors (E) and Warnings (W)
    'E',
    'W',
    # isort
    "I",
    # pep8-naming
    'N',
    # pydocstyle
    'D',
    # pyupgrade
    "UP",
    # flake8-builtins
    "A",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # flake8-bugbear
    'B',
    # flake8-commas
    'COM',
    # flake8-comprehensions
    'C4',
    # flake8-quotes
    'Q',
    # flake8-errmsg
    'EM',
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-pie
    "PIE",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # Ruff-specific rules
    'RUF',
]
ignore = [
    # do not assign a lambda expression, use a def
    "E731",
    # Function definition does not bind loop variable
    "B023",
    # Too many arguments to function call
    "PLR0913",
    # Magic number
    "PLR2004",
]
unfixable = [
    # Remove unused-imports
    "F401",
    # Variable assigned but never used
    "F841",
    # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM118",
    # move to type-checking block
    "TCH003",
]

[tool.isort]
profile = 'black'

[tool.ruff.pydocstyle]
convention = "numpy"
